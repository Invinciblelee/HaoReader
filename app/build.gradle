apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'

static def getVersionName() {
    return String.format(Locale.getDefault(), "2.2.%d", (int) (System.currentTimeMillis() / 1000 / 60 / 60))
}

def getVersionCode() {// 获取版本号
    def versionFile = file('version.properties')// 读取第一步新建的文件
    if (versionFile.canRead()) {// 判断文件读取异常
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()// 读取文件里面的版本号
        def runTasks = gradle.startParameter.taskNames
        if ('assembleRelease' in runTasks) {//仅在assembleRelease任务是增加版本号,其他渠道包在此分别配置
            // 版本号自增之后再写入文件（此处是关键，版本号自增+1）
            versionProps['VERSION_CODE'] = (++versionCode).toString()
            versionProps.store(versionFile.newWriter(), null)
        }
        return versionCode // 返回自增之后的版本号
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

def name = "MONKOVEL"

def keystorePSW = ''
def keystoreAlias = ''
def keystoreAliasPSW = ''
// default keystore file, PLZ config file path in local.properties
def keyFile = file('Bookself.jks')

Properties properties = new Properties()
// local.properties file in the root director
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def keystoreFilepath = properties.getProperty("keystore.path")

if (keystoreFilepath) {
    keystorePSW = properties.getProperty("keystore.password")
    keystoreAlias = properties.getProperty("keystore.alias")
    keystoreAliasPSW = properties.getProperty("keystore.alias_password")
    keyFile = file(keystoreFilepath)
}


android {
    compileSdkVersion compile_sdk_version

    def currentVersionCode = getVersionCode()
    def currentVersionName = getVersionName()

    signingConfigs {
        myConfig {
            storeFile keyFile
            storePassword keystorePSW
            keyAlias keystoreAlias
            keyPassword keystoreAliasPSW
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    defaultConfig {
        applicationId "com.gedoor.monkeybook.super"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode currentVersionCode
        versionName currentVersionName
        project.ext.set("archivesBaseName", name + "_" + version)
        multiDexEnabled true
    }

    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            signingConfig signingConfigs.myConfig
            buildConfigField "boolean", "IS_RELEASE", "true"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.myConfig
            applicationIdSuffix '.debug'
            versionNameSuffix ' debug'
            buildConfigField "boolean", "IS_RELEASE", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        android.applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "${name}_${defaultConfig.versionName}.apk"
            }
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "$support_library_version"
            }
        }
    }
}

dependencies {
    implementation project(':basemvplib')
    testImplementation 'junit:junit:4.12'
    //support
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.media:media:1.1.0-beta01'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    //google
    implementation 'com.google.android.material:material:1.1.0-alpha06'
    implementation 'com.google.android:flexbox:1.1.0'
    //GreenDao
    implementation 'org.greenrobot:greendao:3.2.2'
    implementation 'com.github.yuweiguocn:GreenDaoUpgradeHelper:v2.1.0'
    //Glide
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
    implementation 'jp.wasabeef:glide-transformations:3.2.0'
    //CircleImageView
    implementation 'de.hdodenhof:circleimageview:3.0.0'
    //bind view
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    //二维码
    implementation 'cn.bingoogolapple:bga-qrcode-zxing:1.3.6'
    //颜色选择
    implementation 'com.jaredrummler:colorpicker:1.1.0'
    //简繁转换
    implementation 'com.luhuiguo:chinese-utils:1.0'
    implementation 'com.github.florent37:arclayout:1.0.5'
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0-beta02'
    //Bugly
    implementation 'com.tencent.bugly:crashreport:2.8.6'
    //Rhino
    implementation 'com.github.gedoor:rhino-android:1.2'
	//webServer
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
    implementation 'org.nanohttpd:nanohttpd-websocket:2.3.1'
}

greendao {
    schemaVersion 82
    daoPackage 'com.monke.monkeybook.dao'
    targetGenDir 'src/main/java'
}
repositories {
    mavenCentral()
}

